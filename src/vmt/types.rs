use std::str::FromStr;
use vmt::error::{VMTResult, VMTError};

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum ShaderType {
    LightmappedGeneric,
    Lightmapped4WayBlend,
    LightmappedReflective,
    MonitorScreen,
    MultiBlend,
    Patch,
    Refract,
    SplineRope,
    SpriteCard,
    Subrect,
    UnlitGeneric,
    UnlitTwoTexture,
    VertexLitGeneric,
    VortWarp,
    Water,
    WorldTwoTextureBlend,
    WorldVertexTransition
}

impl FromStr for ShaderType {
    type Err = VMTError;

    fn from_str(s: &str) -> VMTResult<ShaderType> {
        match s {
            "LightmappedGeneric"    => Ok(ShaderType::LightmappedGeneric),
            "Lightmapped_4WayBlend" => Ok(ShaderType::Lightmapped4WayBlend),
            "LightmappedReflective" => Ok(ShaderType::LightmappedReflective),
            "MonitorScreen"         => Ok(ShaderType::MonitorScreen),
            "MultiBlend"            => Ok(ShaderType::MultiBlend),
            "Patch"                 => Ok(ShaderType::Patch),
            "Refract"               => Ok(ShaderType::Refract),
            "SplineRope"            => Ok(ShaderType::SplineRope),
            "SpriteCard"            => Ok(ShaderType::SpriteCard),
            "Subrect"               => Ok(ShaderType::Subrect),
            "UnlitGeneric"          => Ok(ShaderType::UnlitGeneric),
            "UnlitTwoTexture"       => Ok(ShaderType::UnlitTwoTexture),
            "VertexLitGeneric"      => Ok(ShaderType::VertexLitGeneric),
            "VortWarp"              => Ok(ShaderType::VortWarp),
            "Water"                 => Ok(ShaderType::Water),
            "WorldTwoTextureBlend"  => Ok(ShaderType::WorldTwoTextureBlend),
            "WorldVertexTransition" => Ok(ShaderType::WorldVertexTransition),
            _ => Err(VMTError::UnknownShader(s.to_string()))
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum ParamType {
    DevCompileClip,
    DevCompileDetail,
    DevCompileHint,
    DevCompileNodraw,
    DevCompileNonsolid,
    DevCompilePassBullets,
    DevCompileSkip,
    DevKeywords,
    DevNoToolTexture,
    DevToolTexture,

    Alpha,
    AlphaTest, 
        AllowAlphaToCoverage,
    AmbientOcclusion,
        AmbientOcclColor,
        AmbientOcclTexture,
    BaseTexture,
        BaseTextureTransform,
        BaseTextureOffset,
        BaseTextureScale,
    BaseTexture2,
        BaseTextureTransform2,
        BaseTextureOffset2,
        BaseTextureScale2,
    BlendModulateTexture,
        BlendMaskTransform,
    BumpMap,
        BumpTransform,
        SSBump,
        BumpScale,
        BumpFrame,
        NoDiffuseBumpLighting,
        ForceBump,
        BumpAlphaPhongMask,
    NormalMap,
    BumpMap2,
        BumpFrame2,
    Color,
        BlendTintByBaseAlpha,
        BlendTintColorOverBase,
    Detail,
        DetailTextureTransform,
        DetailScale,
        DetailBlendFactor,
        DetailBlendMode,
        DetailTint,
        DetailFrame,
        DetailAlphaMaskBaseTexture,
    DisplacementMap,
    DistanceAlpha,
        SoftEdges,
            ScaleEdgeSoftnessBasedOnScreenRes,
        Glow,
            GlowColor,
            GlowAlpha,
            GlowX,
            GlowY,
            GlowStart,
            GlowEnd,
        Outline,
            OutlineColor,
            OutlineAlpha,
            OutlineStart0,
            OutlineStart1,
            OutlineEnd0,
            OutlineEnd1,
            ScaleOutlineSoftnessBasedOnScreenRes,
    EnvMap,
        EnvMapMask,
            EnvMapMaskTransform,
            EnvMapMaskScale,
            EnvMapMaskFrame,
            BaseAlphaEnvMapMask,
            NormalMapAlphaEnvMapMask,
            SelfIllumEnvMapMaskAlpha,
        EnvMapTint,
        EnvMapContrast,
        EnvMapSaturation,
        EnvMapFrame,
        EnvMapMode,
        BaseTextureNoEnvMap,
        BaseTexture2NoEnvMap,
        EnvMapOptional,
        EnvMapSphere,
        EnvMapFresnel,
        EnvMapAnisotropy,
        EnvMapAnisotrophyScale,
        EnvMapLightmapScale,
    Flesh,
        FleshInteriorEnabled,
        FleshInteriorTexture,
        FleshNormalTexture,
        FleshBorderTexture1D,
        FleshInteriorNoiseTexture,
        FleshSubsurfaceTexture,
        FleshCubeTexture,
        FleshBorderNoiseScale,
        FleshBorderWidth,
        BleshBorderSoftness,
        FleshBorderTint,
        FleshGlossBrightness,
        FleshDebugForceFleshOn,
        Time, //?
    HalfLambert,
    IgnoreZ,
    LightWarpTexture,
    MaxFogDensityScalar,
    Model,
    NoCull,
    NoDecal,
    NoFog,
    ParallaxMap,
    Phong,
        BasemapLuminancePhongMask,
        BasemapAlphaPhongMask,
        PhongExponent,
        PhongExponentTexture,
        ShinyBlood,
        ShinyBloodExponent,
        AllowDiffuseModulation,
        DiffuseExp,
        PhongBoost,
        PhongFresnelRanges,
        PhongDisableHalfLambert,
        AmbientOcclusionTexture,
        PhongAlbedoTint,
        PhongTint,
        PhongWarpTexture,
        PhongMaskContrastBrightness,
        PhongAmount,
    Reflectivity,
    Rimlight,
        RimExponent,
        RimBoost,
        RimMask,
    SeamlessScale,
    SurfaceProp,
    SpriteCard,
        MinSize,
        MaxSize,
        MinFadeSize,
        MaxFadeSize,
        MaxDistance,
        FarFadeInterval,
        BlendFrames,
        OverbrightFactor,
        DepthBlend,
        DepthBlendScale,
        DualSequence,
        SequenceBlendMode,
        MaxLumFrameBlend1,
        MaxLumFrameBlend2,
        ZoomAnimateSeq2,
        RampTexture,
        ExtractGeenAlpha,
        AddOverBlend,
        AddSelf,
        SplineType,
        //UseInstancing, //Xbox 360 only
    Translucent,
        Additive,
    VertexAlpha,
    VertexColor,
    WriteZ,

    //Used in the water shader
    AboveWater,
    BottomMaterial,
    UnderwaterOverlay,
    DuDvFrame,
    FogColor,
    LightmapWaterFog,
    FogEnable,
    FogEnd,
    FogStart,
    ForceCheap,
    ForceExpensive,
    Reflect2DSkybox,
    ReflectAmount,
    ReflectEntities,
    ReflectTexture,
    ReflectTint,
    RefractAmount,
    RefractTexture,
    RefractTint,
    Scroll1,
    Scroll2,
    Flowmap,
    FlowNormalUVScale,
    FlowWorldUVScale,
    FlowUVScrollDistance,
    FlowTimeIntervalSeconds,
    FlowTimescale,
    FlowBumpstrength,
    FlowNoiseTexture,
    FlowNoiseScale,
    FlowDebug,
    ColorFlowUVScale,
    ColorFlowTimeIntervalSeconds,
    ColorFlowUVScrollDistance,
    ColorFlowLerpExp,
    ColorFlowDistanceByNormalStrength,
    DevCompileWater,

    // For Lightmappe_4WayBlend
    Texture1LumStart,
    Texture1LumEnd,
    Texture2LumStart,
    Texture2LumEnd,
    Texture3LumStart,
    Texture3LumEnd,
    Texture4LumStart,
    Texture4LumEnd,
    Texture2BlendStart,
    Texture2BlendEnd,
    Texture3BlendStart,
    Texture3BlendEnd,
    Texture4BlendStart,
    Texture4BlendEnd,
    Texture2BumpBlendFactor,
    Texture3BumpBlendFactor,
    Texture4BumpBlendFactor,
    Texture2UVScale,
    Texture3UVScale,
    Texture4UVScale,
    Texture3BlendMode,
    Texture4BlendMode,
    DetailBlendFactor2,
    DetailBlendFactor3,
    DetailBlendFactor4,
    LumBlendFactor2,
    LumBlendFactor3,
    LumBlendFactor4
}

impl FromStr for ParamType {
    type Err = VMTError;

    fn from_str(s: &str) -> VMTResult<ParamType> {
        match s {
            "%compileclip"          => Ok(ParamType::DevCompileClip),
            "%compiledetail"        => Ok(ParamType::DevCompileDetail),
            "%compilehint"          => Ok(ParamType::DevCompileHint),
            "%compilenodraw"        => Ok(ParamType::DevCompileNodraw),
            "%compilenonsolid"      => Ok(ParamType::DevCompileNonsolid),
            "%compilepassbullets"   => Ok(ParamType::DevCompilePassBullets),
            "%compileskip"          => Ok(ParamType::DevCompileSkip),
            "%keywords"             => Ok(ParamType::DevKeywords),
            "%notooltexture"        => Ok(ParamType::DevNoToolTexture),
            "%tooltexture"          => Ok(ParamType::DevToolTexture),

            "$alpha"                => Ok(ParamType::Alpha),
            "$alphatest"            => Ok(ParamType::AlphaTest),
            "$allowalphatocoverage" => Ok(ParamType::AllowAlphaToCoverage),
            "$ambientocclusion"     => Ok(ParamType::AmbientOcclusion),
            "$ambientocclcolor"     => Ok(ParamType::AmbientOcclColor),
            "$ambientoccltexture"   => Ok(ParamType::AmbientOcclTexture),
            "$basetexture"          => Ok(ParamType::BaseTexture),
            "$basetexturetransform" => Ok(ParamType::BaseTextureTransform),
            "$basetextureoffset"    => Ok(ParamType::BaseTextureOffset),
            "$basetexturescale"     => Ok(ParamType::BaseTextureScale),
            "$basetexture2"         => Ok(ParamType::BaseTexture2),
            "$basetexturetransform2"=> Ok(ParamType::BaseTextureTransform2),
            "$basetextureoffset2"   => Ok(ParamType::BaseTextureOffset2),
            "$basetexturescale2"    => Ok(ParamType::BaseTextureScale2),
            "$blendmodulatetexture" => Ok(ParamType::BlendModulateTexture),
            "$blendmasktransform"   => Ok(ParamType::BlendMaskTransform),
            "$bumpmap"              => Ok(ParamType::BumpMap),
            "$bumptransform"        => Ok(ParamType::BumpTransform),
            "$ssbump"               => Ok(ParamType::SSBump),
            "$bumpscale"            => Ok(ParamType::BumpScale),
            "$bumpframe"            => Ok(ParamType::BumpFrame),
            "$nodiffusebumplighting"=> Ok(ParamType::NoDiffuseBumpLighting),
            "$forcebump"            => Ok(ParamType::ForceBump),
            "$bumpalphaphongmask"   => Ok(ParamType::BumpAlphaPhongMask),
            "$normalmap"            => Ok(ParamType::NormalMap),
            "$bumpmap2"             => Ok(ParamType::BumpMap2),
            "$bumpframe2"           => Ok(ParamType::BumpFrame2),
            "$color"                => Ok(ParamType::Color),
            "$blendtintbybasealpha" => Ok(ParamType::BlendTintByBaseAlpha),
            "$blendtintcoloroverbase" => Ok(ParamType::BlendTintColorOverBase),
            "$detail"               => Ok(ParamType::Detail),
            "$detailtexturetransform" => Ok(ParamType::DetailTextureTransform),
            "$detailscale"          => Ok(ParamType::DetailScale),
            "$detailblendfactor"    => Ok(ParamType::DetailBlendFactor),
            "$detailblendmode"      => Ok(ParamType::DetailBlendMode),
            "$detailtint"           => Ok(ParamType::DetailTint),
            "$detailframe"          => Ok(ParamType::DetailFrame),
            "$detail_alpha_mask_base_texture" => Ok(ParamType::DetailAlphaMaskBaseTexture),
            "$displacementmap"      => Ok(ParamType::DisplacementMap),
            "$distancealpha"        => Ok(ParamType::DistanceAlpha),
            "$softedges"            => Ok(ParamType::SoftEdges),
            "$scaleedgesoftnessbasedonscreenres" => Ok(ParamType::ScaleEdgeSoftnessBasedOnScreenRes),
            "$glow"                 => Ok(ParamType::Glow),
            "$glowcolor"            => Ok(ParamType::GlowColor),
            "$glowalpha"            => Ok(ParamType::GlowAlpha),
            "$glowx"                => Ok(ParamType::GlowX),
            "$glowy"                => Ok(ParamType::GlowY),
            "$glowstart"            => Ok(ParamType::GlowStart),
            "$glowend"              => Ok(ParamType::GlowEnd),
            "$outline"              => Ok(ParamType::Outline),
            "$outlinecolor"         => Ok(ParamType::OutlineColor),
            "$outlinealpha"         => Ok(ParamType::OutlineAlpha),
            "$outlinestart0"        => Ok(ParamType::OutlineStart0),
            "$outlinestart1"        => Ok(ParamType::OutlineStart1),
            "$outlineend0"          => Ok(ParamType::OutlineEnd0),
            "$outlineend1"          => Ok(ParamType::OutlineEnd1),
            "$scaleoutlinesoftnessbasedonscreenres" => Ok(ParamType::ScaleOutlineSoftnessBasedOnScreenRes),
            "$envmap"               => Ok(ParamType::EnvMap),
            "$envmapmask"           => Ok(ParamType::EnvMapMask),
            "$envmapmasktransform"  => Ok(ParamType::EnvMapMaskTransform),
            "$envmapmaskscale"      => Ok(ParamType::EnvMapMaskScale),
            "$envmapmaskframe"      => Ok(ParamType::EnvMapMaskFrame),
            "$basealphaenvmapmask"  => Ok(ParamType::BaseAlphaEnvMapMask),
            "$normalmapalphaenvmapmask" => Ok(ParamType::NormalMapAlphaEnvMapMask),
            "$selfillum_envmapmask_alpha" => Ok(ParamType::SelfIllumEnvMapMaskAlpha),
            "$envmaptint"           => Ok(ParamType::EnvMapTint),
            "$envmapcontrast"       => Ok(ParamType::EnvMapContrast),
            "$envmapsaturation"     => Ok(ParamType::EnvMapSaturation),
            "$envmapframe"          => Ok(ParamType::EnvMapFrame),
            "$envmapmode"           => Ok(ParamType::EnvMapMode),
            "$basetexturenoenvmap"  => Ok(ParamType::BaseTextureNoEnvMap),
            "$basetexture2noenvmap" => Ok(ParamType::BaseTexture2NoEnvMap),
            "$envmapoptional"       => Ok(ParamType::EnvMapOptional),
            "$envmapsphere"         => Ok(ParamType::EnvMapSphere),
            "$envmapfresnel"        => Ok(ParamType::EnvMapFresnel),
            "$envmapanisotropy"     => Ok(ParamType::EnvMapAnisotropy),
            "$envmapanisotrophyscale"=> Ok(ParamType::EnvMapAnisotrophyScale),
            "$envmaplightmapscale"  => Ok(ParamType::EnvMapLightmapScale),
            "$flesh"                => Ok(ParamType::Flesh),
            "$fleshinteriorenabled" => Ok(ParamType::FleshInteriorEnabled),
            "$fleshinteriortexture" => Ok(ParamType::FleshInteriorTexture),
            "$fleshnormaltexture"   => Ok(ParamType::FleshNormalTexture),
            "$fleshbordertexture1d" => Ok(ParamType::FleshBorderTexture1D),
            "$fleshinteriornoisetexture" => Ok(ParamType::FleshInteriorNoiseTexture),
            "$fleshsubsurfacetexture" => Ok(ParamType::FleshSubsurfaceTexture),
            "$fleshcubetexture"     => Ok(ParamType::FleshCubeTexture),
            "$fleshbordernoisescale"=> Ok(ParamType::FleshBorderNoiseScale),
            "$fleshborderwidth"     => Ok(ParamType::FleshBorderWidth),
            "$bleshbordersoftness"  => Ok(ParamType::BleshBorderSoftness),
            "$fleshbordertint"      => Ok(ParamType::FleshBorderTint),
            "$fleshglossbrightness" => Ok(ParamType::FleshGlossBrightness),
            "$fleshdebugforcefleshon" => Ok(ParamType::FleshDebugForceFleshOn),
            "$time"                 => Ok(ParamType::Time),
            "$halflambert"          => Ok(ParamType::HalfLambert),
            "$ignorez"              => Ok(ParamType::IgnoreZ),
            "$lightwarptexture"     => Ok(ParamType::LightWarpTexture),
            "$maxfogdensityscalar"  => Ok(ParamType::MaxFogDensityScalar),
            "$model"                => Ok(ParamType::Model),
            "$nocull"               => Ok(ParamType::NoCull),
            "$nodecal"              => Ok(ParamType::NoDecal),
            "$nofog"                => Ok(ParamType::NoFog),
            "$parallaxmap"          => Ok(ParamType::ParallaxMap),
            "$phong"                => Ok(ParamType::Phong),
            "$basemapluminancephongmask" => Ok(ParamType::BasemapLuminancePhongMask),
            "$basemapalphaphongmask"=> Ok(ParamType::BasemapAlphaPhongMask),
            "$phongexponent"        => Ok(ParamType::PhongExponent),
            "$phongexponenttexture" => Ok(ParamType::PhongExponentTexture),
            "$shinyblood"           => Ok(ParamType::ShinyBlood),
            "$shinybloodexponent"   => Ok(ParamType::ShinyBloodExponent),
            "$allowdiffusemodulation" => Ok(ParamType::AllowDiffuseModulation),
            "$diffuseexp"           => Ok(ParamType::DiffuseExp),
            "$phongboost"           => Ok(ParamType::PhongBoost),
            "$phongfresnelranges"   => Ok(ParamType::PhongFresnelRanges),
            "$phongdisablehalflambert" => Ok(ParamType::PhongDisableHalfLambert),
            "$ambientocclusiontexture" => Ok(ParamType::AmbientOcclusionTexture),
            "$phongalbedotint"      => Ok(ParamType::PhongAlbedoTint),
            "$phongtint"            => Ok(ParamType::PhongTint),
            "$phongwarptexture"     => Ok(ParamType::PhongWarpTexture),
            "$phongmaskcontrastbrightness" => Ok(ParamType::PhongMaskContrastBrightness),
            "$phongamount"          => Ok(ParamType::PhongAmount),
            "$reflectivity"         => Ok(ParamType::Reflectivity),
            "$rimlight"             => Ok(ParamType::Rimlight),
            "$rimexponent"          => Ok(ParamType::RimExponent),
            "$rimboost"             => Ok(ParamType::RimBoost),
            "$rimmask"              => Ok(ParamType::RimMask),
            "$seamless_scale"        => Ok(ParamType::SeamlessScale),
            "$surfaceprop"          => Ok(ParamType::SurfaceProp),
            "$spritecard"           => Ok(ParamType::SpriteCard),
            "$minsize"              => Ok(ParamType::MinSize),
            "$maxsize"              => Ok(ParamType::MaxSize),
            "$minfadesize"          => Ok(ParamType::MinFadeSize),
            "$maxfadesize"          => Ok(ParamType::MaxFadeSize),
            "$maxdistance"          => Ok(ParamType::MaxDistance),
            "$farfadeinterval"      => Ok(ParamType::FarFadeInterval),
            "$blendframes"          => Ok(ParamType::BlendFrames),
            "$overbrightfactor"     => Ok(ParamType::OverbrightFactor),
            "$depthblend"           => Ok(ParamType::DepthBlend),
            "$depthblendscale"      => Ok(ParamType::DepthBlendScale),
            "$dualsequence"         => Ok(ParamType::DualSequence),
            "$sequence_blend_mode"    => Ok(ParamType::SequenceBlendMode),
            "$maxlumframeblend1"    => Ok(ParamType::MaxLumFrameBlend1),
            "$maxlumframeblend2"    => Ok(ParamType::MaxLumFrameBlend2),
            "$zoomanimateseq2"      => Ok(ParamType::ZoomAnimateSeq2),
            "$ramptexture"          => Ok(ParamType::RampTexture),
            "$extractgeenalpha"     => Ok(ParamType::ExtractGeenAlpha),
            "$addoverblend"         => Ok(ParamType::AddOverBlend),
            "$addself"              => Ok(ParamType::AddSelf),
            "$splinetype"           => Ok(ParamType::SplineType),
            "$translucent"          => Ok(ParamType::Translucent),
            "$additive"             => Ok(ParamType::Additive),
            "$vertexalpha"          => Ok(ParamType::VertexAlpha),
            "$vertexcolor"          => Ok(ParamType::VertexColor),
            "$writez"               => Ok(ParamType::WriteZ),

            "$abovewater"           => Ok(ParamType::AboveWater),
            "$bottommaterial"       => Ok(ParamType::BottomMaterial),
            "$underwateroverlay"    => Ok(ParamType::UnderwaterOverlay),
            "$dudvframe"            => Ok(ParamType::DuDvFrame),
            "$fogcolor"             => Ok(ParamType::FogColor),
            "$lightmapwaterfog"     => Ok(ParamType::LightmapWaterFog),
            "$fogenable"            => Ok(ParamType::FogEnable),
            "$fogend"               => Ok(ParamType::FogEnd),
            "$fogstart"             => Ok(ParamType::FogStart),
            "$forcecheap"           => Ok(ParamType::ForceCheap),
            "$forceexpensive"       => Ok(ParamType::ForceExpensive),
            "$reflect2dskybox"      => Ok(ParamType::Reflect2DSkybox),
            "$reflectamount"        => Ok(ParamType::ReflectAmount),
            "$reflectentities"      => Ok(ParamType::ReflectEntities),
            "$reflecttexture"       => Ok(ParamType::ReflectTexture),
            "$reflecttint"          => Ok(ParamType::ReflectTint),
            "$refractamount"        => Ok(ParamType::RefractAmount),
            "$refracttexture"       => Ok(ParamType::RefractTexture),
            "$refracttint"          => Ok(ParamType::RefractTint),
            "$scroll1"              => Ok(ParamType::Scroll1),
            "$scroll2"              => Ok(ParamType::Scroll2),
            "$flowmap"              => Ok(ParamType::Flowmap),
            "$flow_normaluvscale"   => Ok(ParamType::FlowNormalUVScale),
            "$flow_worlduvscale"    => Ok(ParamType::FlowWorldUVScale),
            "$flow_uvscrolldistance" => Ok(ParamType::FlowUVScrollDistance),
            "$flow_timeintervalseconds" => Ok(ParamType::FlowTimeIntervalSeconds),
            "$flow_timescale"       => Ok(ParamType::FlowTimescale),
            "$flow_bumpstrength"    => Ok(ParamType::FlowBumpstrength),
            "$flow_noise_texture"   => Ok(ParamType::FlowNoiseTexture),
            "$flow_noise_scale"     => Ok(ParamType::FlowNoiseScale),
            "$flow_debug"           => Ok(ParamType::FlowDebug),
            "$color_flow_uvscale"   => Ok(ParamType::ColorFlowUVScale),
            "$color_flow_timeintervalinseconds" => Ok(ParamType::ColorFlowTimeIntervalSeconds),
            "$color_flow_uvscrolldistance" => Ok(ParamType::ColorFlowUVScrollDistance),
            "$color_flow_lerpexp"   => Ok(ParamType::ColorFlowLerpExp),
            "$color_flow_distancebynormalstrength" => Ok(ParamType::ColorFlowDistanceByNormalStrength),
            "%compilewater"         => Ok(ParamType::DevCompileWater),

            "$texture1_lumstart"    => Ok(ParamType::Texture1LumStart),
            "$texture1_lumend"      => Ok(ParamType::Texture1LumEnd),
            "$texture2_lumstart"    => Ok(ParamType::Texture2LumStart),
            "$texture2_lumend"      => Ok(ParamType::Texture2LumEnd),
            "$texture3_lumstart"    => Ok(ParamType::Texture3LumStart),
            "$texture3_lumend"      => Ok(ParamType::Texture3LumEnd),
            "$texture4_lumstart"    => Ok(ParamType::Texture4LumStart),
            "$texture4_lumend"      => Ok(ParamType::Texture4LumEnd),
            "$texture2_blendstart"  => Ok(ParamType::Texture2BlendStart),
            "$texture2_blendend"    => Ok(ParamType::Texture2BlendEnd),
            "$texture3_blendstart"  => Ok(ParamType::Texture3BlendStart),
            "$texture3_blendend"    => Ok(ParamType::Texture3BlendEnd),
            "$texture4_blendstart"  => Ok(ParamType::Texture4BlendStart),
            "$texture4_blendend"    => Ok(ParamType::Texture4BlendEnd),
            "$texture2_bumpblendfactor" => Ok(ParamType::Texture2BumpBlendFactor),
            "$texture3_bumpblendfactor" => Ok(ParamType::Texture3BumpBlendFactor),
            "$texture4_bumpblendfactor" => Ok(ParamType::Texture4BumpBlendFactor),
            "$texture2_uvscale"     => Ok(ParamType::Texture2UVScale),
            "$texture3_uvscale"     => Ok(ParamType::Texture3UVScale),
            "$texture4_uvscale"     => Ok(ParamType::Texture4UVScale),
            "$texture3_blendmode"   => Ok(ParamType::Texture3BlendMode),
            "$texture4_blendmode"   => Ok(ParamType::Texture4BlendMode),
            "$detailblendfactor2"   => Ok(ParamType::DetailBlendFactor2),
            "$detailblendfactor3"   => Ok(ParamType::DetailBlendFactor3),
            "$detailblendfactor4"   => Ok(ParamType::DetailBlendFactor4),
            "$lumblendfactor2"      => Ok(ParamType::LumBlendFactor2),
            "$lumblendfactor3"      => Ok(ParamType::LumBlendFactor3),
            "$lumblendfactor4"      => Ok(ParamType::LumBlendFactor4),

            _ => Err(VMTError::UnknownParameter(s.to_string()))
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum ParamTag {
    Bool,
    Material,
    Texture,
    Normal,
    Absolute,
    NormalVector2,
    NormalVector3,
    NormalVector4,
    AbsVector2,
    AbsVector3,
    AbsVector4,
    Matrix
}

pub enum ParamValue {
    Bool(bool),
    Material(String),
    Texture(String),
    Normal(f32),
    Absolute(i32),
    NormalVector2(f32, f32),
    NormalVector3(f32, f32, f32),
    NormalVector4(f32, f32, f32, f32),
    AbsVector2(i32, i32),
    AbsVector3(i32, i32, i32),
    AbsVector4(i32, i32, i32, i32),
    // Center x & y, scale x & y, rotation, translate x & y
    Matrix(f32, f32, f32, f32, f32, f32, f32)
}